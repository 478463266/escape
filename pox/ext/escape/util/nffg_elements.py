# Copyright 2015 Balazs Sonkoly, Janos Czentye
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Classes for handling the elements of the NF-FG data structure
"""


class Base(object):
  """
  Main base class for common functionality.
  """

  def __init__ (self, ID=None):
    """
    Init.

    :param ID: optional identification (generated by default)
    :type ID: str or int
    """
    super(Base, self).__init__()
    self.id = str(ID) if ID is not None else str(id(self))  # mandatory

  def persist (self):
    """
    Common function to persist the class structure into a plain text format.
    """
    raise NotImplementedError()


class Node(Base):
  """
  Base class for different types of nodes in the NF-FG.
  """

  def __init__ (self, ID=None, name=None):
    """
    Init.

    :param name: optional name
    :type name: str
    :return: None
    """
    super(Node, self).__init__(ID)
    self.name = name  # optional
    self.ports = []  # list

  def add_port (self, *properties, **kwargs):
    """
    Add a port with the given params to the NF.
    """
    port = Port(*properties, **kwargs)
    self.ports.append(port)
    return port

  def del_port (self, id):
    """
    Remove the port with the given id from the NF.
    """
    for p in self.ports:
      if p.id == id:
        self.ports.remove(p)
        return

  def persist (self):
    """
    Common function to persist the class structure into a plain text format.
    """
    node = {"id": str(self.id)}
    ports = [port.persist() for port in self.ports]
    if ports:
      node["ports"] = ports
    if self.name is not None:
      node["name"] = str(self.name)
    return node


################################################################################
# ---------- NODE AND LINK RESOURCES -------------------
################################################################################

class NodeResource(Base):
  """
  Class for storing resource information for Nodes.

  YANG: grouping node_resource
  """

  def __init__ (self, cpu=None, mem=None, storage=None, networking=None):
    """
    Init.

    :param cpu: CPU resource
    :type cpu: str or int
    :param mem: memory resource
    :type mem: str or int
    :param storage: storage resource
    :type storage: str or int
    :param networking: networking resource
    :type networking: str or int
    :return: None
    """
    super(NodeResource, self).__init__()
    # container: compute
    self.cpu = cpu
    self.mem = mem
    # container
    self.storage = storage
    self.networking = networking

  def persist (self):
    res = {}
    compute = {}
    if self.cpu is not None:
      compute["cpu"] = str(self.cpu)
    if self.mem is not None:
      compute["mem"] = str(self.mem)
    if compute:
      res["compute"] = compute
    if self.storage is not None:
      res["storage"] = str(self.storage)
    if self.networking is not None:
      res["networking"] = str(self.networking)
    return res


class LinkResource(Base):
  """
  Class for storing resource information for edges.

  YANG: grouping link_resource
  """

  def __init__ (self, delay=None, bandwidth=None):
    """
    Init.

    :param delay: delay resource
    :type delay: str or int
    :param bandwidth: bandwidth resource
    :type bandwidth: str or int
    :return: None
    """
    super(LinkResource, self).__init__()
    self.delay = delay
    self.bandwidth = bandwidth

  def persist (self):
    # return {"delay": str(self.delay), "bandwidth": str(self.bandwidth)}
    res = {}
    if self.delay is not None:
      res["delay"] = str(self.delay)
    if self.bandwidth is not None:
      res["bandwidth"] = str(self.bandwidth)
    return res


class Port(Base):
  """
  Class for storing a port of an NF.
  """

  def __init__ (self, *property, **kwargs):
    """
    Init.

    :param type: initial property of the port a.k.a type (default: "port")
    :type type: str
    :return: None
    """
    ID = kwargs["ID"] if "ID" in kwargs else None
    super(Port, self).__init__(ID)
    self.property = property

  def persist (self):
    port = {"id": str(self.id)}
    property = [property for property in self.property]
    if property:
      port["property"] = property
    return port


class Flowrule(Base):
  """
  Class for storing a flowrule.
  """

  def __init__ (self, match=None, action=None):
    """
    Init.

    :param match: matching rule
    :type match: str
    :param action: forwarding action
    :type action: str
    :return: None
    """
    super(Flowrule, self).__init__()
    self.match = match
    self.action = action

  def persist (self):
    flowrule = {}
    if self.match is not None:
      flowrule["match"] = str(self.match)
      if self.action is not None:
        flowrule["action"] = str(self.action)
    return flowrule


class InfraPort(Port):
  """
  Class for storing a port of Infra Node and handles flowrules.
  """

  def __init__ (self, *property, **kwargs):
    super(InfraPort, self).__init__(*property, **kwargs)
    self.flowrules = []

  def add_flowrule (self, match=None, action=None):
    """
    Add a flowrule with the given params to the port of Infra Node..
    """
    flowrule = Flowrule(match=match, action=action)
    self.flowrules.append(flowrule)
    return flowrule

  def del_flowrule (self, id):
    """
    Remove the flowrule with the given id from the Infra Node.
    """
    for f in self.flowrules:
      if f.id == id:
        self.flowrules.remove(f)
        return

  def persist (self):
    port = super(InfraPort, self).persist()
    flowrules = [f.persist() for f in self.flowrules]
    if flowrules:
      port["flowrules"] = flowrules
    return port


################################################################################
# ------------------------ NF / SAP / INFRASTRUCTURE NODES -------------------
################################################################################

class NodeNF(Node):
  """
  Network Function (NF) nodes in the graph.
  """

  def __init__ (self, ID=None, name=None, func_type=None, dep_type=None,
       res=None):
    """
    Init.

    :param func_type: functional type (default: "None")
    :type func_type: str
    :param dep_type: deployment type (default: "None")
    :type dep_type: str
    :param res: NF resources
    :type res: NodeResource
    :return: None
    """
    super(NodeNF, self).__init__(ID=ID, name=name)
    self.functional_type = func_type  # mandatory
    # container: specification
    self.deployment_type = dep_type
    self.resources = res if res is not None else NodeResource()
    # container

  def persist (self):
    node = super(NodeNF, self).persist()
    if self.functional_type is not None:
      node["functional_type"] = str(self.functional_type)
    specification = {}
    if self.deployment_type is not None:
      specification["deployment_type"] = str(self.deployment_type)
    res = self.resources.persist()
    if res:
      specification["resources"] = res
    if specification:
      node["specification"] = specification
    return node


class NodeSAP(Node):
  """
  Class for SAP nodes in the NF-FG.
  """

  def __init__ (self, ID=None, name=None):
    super(NodeSAP, self).__init__(ID=ID, name=name)


class NodeInfra(Node):
  """
  Class for infrastructure nodes in the NF-FG.
  """
  # Default Infrastructure Node type
  DEFAULT_TYPE = 0
  # Default domain type
  DEFAULT_DOMAIN = None

  def __init__ (self, ID=None, name=None, domain=DEFAULT_DOMAIN,
       type=DEFAULT_TYPE, res=None):
    super(NodeInfra, self).__init__(ID=ID, name=name)
    self.domain = domain
    self.type = type  # mandatory
    self.resources = res if res is not None else NodeResource()

  def add_port (self, *properties, **kwargs):
    """
    Add a port with the given params to the NF.
    """
    port = InfraPort(*properties, **kwargs)
    self.ports.append(port)
    return port

  def persist (self):
    node = super(NodeInfra, self).persist()
    if self.domain is not None:
      node["domain"] = str(self.domain)
    if self.type is not None:
      node["type"] = str(self.type)
    res = self.resources.persist()
    if res:
      node["resources"] = res
    return node


################################################################################
# ---------- SG REQUIREMENTS / SG NEXT_HOPS / INFRASTRUCTURE LINKS -----------
################################################################################

class Link(Base):
  """
  Base class for different types of edges in the NF-FG.
  """

  def __init__ (self, src_node, src_port, dst_node, dst_port, ID=None):
    """
    Init.

    :param src_node: source port
    :type src_node: str
    :param src_port: source port
    :type src_port: str
    :param dst_node: destination port
    :type dst_node: str
    :param dst_port: destination port
    :type dst_port: str
    :return: None
    """
    super(Link, self).__init__(ID=ID)
    self.src_node = src_node  # mandatory
    self.src_port = src_port  # mandatory
    self.dst_node = dst_node  # mandatory
    self.dst_port = dst_port  # mandatory

  def persist (self):
    return {"src_node": str(self.src_node), "src_port": str(self.src_port),
            "dst_node": str(self.dst_node), "dst_port": str(self.dst_port)}


class EdgeLink(Link):
  """
  Class for static and dynamic links in the NF-FG.

  Represent a static and dynamic link.
  """

  def __init__ (self, src_node, src_port, dst_node, dst_port, type="static",
       ID=None, res=None):
    super(EdgeLink, self).__init__(src_node, src_port, dst_node, dst_port, ID)
    self.type = type
    self.resources = res if res is not None else LinkResource()

  def persist (self):
    link = super(EdgeLink, self).persist()
    res = self.resources.persist()
    if res:
      link.update(res)
    return link


class EdgeSGLink(Link):
  """
  Class for links of SG.

  Represent an edge between SG elements.
  """

  def __init__ (self, src_node, src_port, dst_node, dst_port, ID=None,
       flowclass=None):
    super(EdgeSGLink, self).__init__(src_node, src_port, dst_node, dst_port, ID)
    self.flowclass = flowclass  # flowrule without action

  def persist (self):
    link = super(EdgeSGLink, self).persist()
    if self.flowclass is not None:
      link["flowclass"] = str(self.flowclass)
    return link


class EdgeReq(Link):
  """
  Class for requirements between arbitrary NF modes
  """

  def __init__ (self, src_node, src_port, dst_node, dst_port, ID=None,
       reqs=None):
    super(EdgeReq, self).__init__(src_node, src_port, dst_node, dst_port, ID)
    self.reqs = reqs if reqs is not None else LinkResource()

  def persist (self):
    link = super(EdgeReq, self).persist()
    req = self.reqs.persist()
    if req:
      link["reqs"] = req
    return link


if __name__ == "__main__":
  # NF
  nf = NodeNF()
  nf.id = "nf1"
  nf.name = "NetworkFunction1"
  nf.functional_type = "functype1"
  nf.deployment_type = "virtual"
  nf.resources.cpu = "10VCPU"
  nf.resources.mem = "1GB"
  nf.resources.storage = "10GB"
  nf.resources.networking = "2Mbps"
  # nf.add_port("port_nf1", "port1", "virtual", "vlan:1025")
  nf.add_port("port1", "virtual", "vlan:1025", ID="port_nf1")
  # SAP
  sap = NodeSAP()
  sap.id = "sap1"
  sap.name = "sap1"
  sap.add_port("port_sap")
  # Infra
  infra = NodeInfra()
  infra.id = "infra1"
  infra.name = "BisBis1"
  infra.domain = "virtual"
  infra.resources.cpu = "20VCPU"
  infra.resources.mem = "2GB"
  infra.resources.storage = "20GB"
  infra.resources.networking = "4Mbps"
  port_infra = infra.add_port(ID="port_infra")
  port_infra.add_flowrule("match123", "action456")
  # Edge link
  edge_link = EdgeLink("node1", "port1", "node2", "port2")
  edge_link.id = "link1"
  edge_link.resources.bandwidth = "100Mbps"
  edge_link.resources.delay = "5ms"
  # Edge SG next hop
  edge_sg = EdgeSGLink("node1", "port1", "node2", "port2")
  edge_sg.id = "link1"
  edge_sg.flowclass = "flowclass1"
  # Edge requirement
  edge_req = EdgeReq("node1", "port1", "node2", "port2")
  edge_req.id = "link1"
  edge_req.reqs.bandwidth = "100Mbps"
  edge_req.reqs.delay = "5ms"
  # Generate
  import json

  print json.dumps(nf.persist(), indent=1)
  print json.dumps(sap.persist(), indent=1)
  print json.dumps(infra.persist(), indent=1)
  print json.dumps(edge_link.persist(), indent=1)
  print json.dumps(edge_sg.persist(), indent=1)
  print json.dumps(edge_req.persist(), indent=1)
