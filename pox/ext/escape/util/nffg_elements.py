# Copyright 2015 Balazs Sonkoly, Janos Czentye
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Classes for handling the elements of the NF-FG data structure
"""
import json
from __builtin__ import id as generate
import random
from collections import Iterable, OrderedDict

################################################################################
# ---------- BASE classes of NFFG elements -------------------
################################################################################


class Persistable(object):
  """
  Define general persist function for the whole NFFG structure.
  """

  def persist (self):
    """
    Common function to persist the actual element into a plain text format.

    :return: generated object structure fit to JSON
    :rtype: object
    """
    raise NotImplementedError("All NF-FG entity must be persistable!")

  def load (self, data, *args, **kwargs):
    """
    Common function to fill self with data from JSON data.

    :param data: object structure in JSON
    :return: self
    """
    raise NotImplementedError("All NF-FG entity must support load function!")

  @classmethod
  def parse (cls, data, *args, **kwargs):
    """
    Common function to parse the given JSON object structure as the actual NF-FG
    entity type and return a newly created object.

    :param data: raw JSON object structure
    :type data: object
    :return: parsed data as the entity type
    :rtype: :any:`Persistable`
    """
    return cls().load(data, *args, **kwargs)


class Element(Persistable):
  """
  Main base class for NF-FG elements with unique id.

  Contains the common functionality.
  """
  # Operation constants
  ADD = "ADD"
  DEL = "DELETE"
  MOD = "MODIFIED"
  MOV = "MOVED"

  def __init__ (self, id=None, type="ELEMENT", operation=None):
    """
    Init.

    :param id: optional identification (generated by default)
    :type id: str or int
    :param type: explicit object type both for nodes and edges
    :type type: str
    :return: None
    """
    super(Element, self).__init__()
    self.id = id if id is not None else generate(self) \
              + random.randint(0,999999)
    self.type = type
    self.operation = operation

  def persist (self):
    # Need to override
    element = OrderedDict(id=self.id)
    if self.operation is not None:
      element["operation"] = self.operation
    return element

  def load (self, data, *args, **kwargs):
    self.id = data['id']
    self.operation = data.get("operation")  # optional
    return self

  def copy (self):
    from copy import deepcopy
    return deepcopy(self)

  ##############################################################################
  # dict specific functions
  ##############################################################################

  def __getitem__ (self, item):
    if hasattr(self, item):
      return getattr(self, item)
    else:
      raise KeyError(
        "%s object has no key: %s" % (self.__class__.__name__, item))

  def __setitem__ (self, key, value):
    if hasattr(self, key):
      return setattr(self, key, value)
    else:
      raise KeyError(
        "%s object has no key: %s" % (self.__class__.__name__, key))

  def __contains__ (self, item):
    return hasattr(self, item)

  def get (self, item, default=None):
    try:
      return self[item]
    except KeyError:
      return default

  def setdefault (self, key, default=None):
    if key not in self:
      self[key] = default

  def clear (self):
    raise RuntimeError("This standard dict functions is not supported by NFFG!")

  def update (self, dict2):
    raise RuntimeError(
      "This standard dict functions is not supported by NFFG! self:%s dict2: "
      "%s" % (self, dict2))


class PortContainer(object):
  """
  Basic container class for ports.

  Implements a Container-like behavior for getting a Port with id:
    cont = PortContainer()
    ...
    cont["port_id"]
  """

  def __init__ (self, container=None):
    self.container = container if container is not None else []

  def __getitem__ (self, id):
    for port in self.container:
      if port.id == id:
        return port
    raise KeyError("Port with id: %s is not defined!" % id)

  def __iter__ (self):
    return iter(self.container)

  def __len__ (self):
    return len(self.container)

  def __contains__ (self, item):
    # this type checking is important because with Port ID input the function
    # would silently return False!
    if not isinstance(item, Port):
      raise RuntimeError("PortContainer's operator \"in\" works only with Port"
                         " objects (and not Port ID-s!)")
    return item in self.container

  def append (self, item):
    self.container.append(item)
    return item

  def remove (self, item):
    return self.container.remove(item)

  def clear (self):
    del self.container[:]

  def __str__ (self):
    return str(self.container)

  def __repr__ (self):
    return str(self)


class Node(Element):
  """
  Base class for different types of nodes in the NF-FG.
  """
  # Node type constants:
  # Infrastructure node --> abstract node represents one or more physical node
  INFRA = "INFRA"
  # SAP nodes --> abstract node represents end point/ports of a service
  SAP = "SAP"
  # Network Function (NF) node --> abstract node represents a virtual function
  NF = "NF"

  def __init__ (self, type, id=None, name=None):
    """
    Init.

    :param type: node type
    :type type: str
    :param id: optional id
    :type id: str or int
    :param name: optional name
    :type name: str
    :return: None
    """
    super(Node, self).__init__(id=id, type=type)
    self.name = name if name is not None else str(id)  # optional
    self.ports = PortContainer()  # list of Ports

  @property
  def short_name (self):
    return self.name if self.name else "id: %s" % self.id

  def add_port (self, id=None, properties=None):
    """
    Add a port with the given params to the Node.

    :param id: optional id
    :type id: str or int
    :param properties: supported properties of the port (one or more as list)
    :type properties: str or iterable(str)
    :return: newly created and stored Port object
    :rtype: :any:`Port`
    """
    port = Port(node=self, properties=properties, id=id)
    self.ports.append(port)
    return port

  def del_port (self, id):
    """
    Remove the port with the given id from the Node.

    :param id: port id
    :type id: int or str
    :return: the actual Port is found and removed or not
    :rtype: bool
    """
    for port in self.ports:
      if port.id == id:
        del port.node
        return self.ports.remove(port)
    return False

  def persist (self):
    node = super(Node, self).persist()
    if self.name is not None:
      node["name"] = self.name
    ports = [port.persist() for port in self.ports]
    if ports:
      node["ports"] = ports
    return node

  def load (self, data, *args, **kwargs):
    super(Node, self).load(data=data)
    self.name = data.get('name')  # optional
    for port in data.get('ports', ()):
      self.add_port(id=port['id'], properties=port.get('property'))
    return self

  def __repr__ (self):
    return "<|ID: %s, Type: %s --> %s|>" % (
      self.id, self.type, super(Element, self).__repr__())

  def __str__ (self):
    return "%s(id:%s, type:%s)" % (self.__class__.__name__, self.id, self.type)


class Link(Element):
  """
  Base class for different types of edges in the NF-FG.
  """
  # Edge type constants:
  # Static link --> physical link between saps and infras
  STATIC = "STATIC"
  # Dynamic link --> virtual link between nfs and infras created on demand
  DYNAMIC = "DYNAMIC"
  # SG next hop --> virtual link to describe connection between elements in SG
  SG = "SG"
  # Requirement --> virtual link to define constraints between SG elements
  REQUIREMENT = "REQUIREMENT"

  def __init__ (self, src=None, dst=None, type=None, id=None):
    """
    Init.

    :param src: source port
    :type src: :any:`Port`
    :param dst: destination port
    :type dst: :any:`Port`
    :param type: link type
    :type type: str
    :param id: optional id
    :type id: str or int
    :return: None
    """
    super(Link, self).__init__(id=id, type=type)
    if (src is not None and not isinstance(src, Port)) or (
             dst is not None and not isinstance(dst, Port)):
      raise RuntimeError("Src and dst must be Port objects!")
    # Reference to src Port object
    self.src = src  # mandatory
    # Reference to dst Port object
    self.dst = dst  # mandatory

  def persist (self):
    link = super(Link, self).persist()
    link['src_node'] = self.src.node.id
    link['src_port'] = self.src.id
    link['dst_node'] = self.dst.node.id
    link['dst_port'] = self.dst.id
    return link

  def load (self, data, container=None, *args, **kwargs):
    if container is None:
      raise RuntimeError(
        "Container reference is not given for edge endpoint lookup!")
    super(Link, self).load(data=data)
    self.src = container.get_port(data['src_node'], data['src_port'])
    self.dst = container.get_port(data['dst_node'], data['dst_port'])
    if self.src is None or self.dst is None:
      raise RuntimeError("Edge not found with params: %s !" % data)
    return self

  def __repr__ (self):
    return "<|ID: %s, Type: %s, src: %s[%s], dst: %s[%s] --> %s|>" % (
      self.id, self.type, self.src.node.id, self.src.id, self.dst.node.id,
      self.dst.id, super(Element, self).__repr__())


################################################################################
# ---------- NODE AND LINK RESOURCES, ATTRIBUTES -------------------
################################################################################

class NodeResource(Persistable):
  """
  Class for storing resource information for Nodes.
  """

  # YANG: grouping node_resource

  def __init__ (self, cpu=None, mem=None, storage=None, delay=None,
                bandwidth=None):
    """
    Init.

    :param cpu: CPU resource
    :type cpu: float
    :param mem: memory resource
    :type mem: float
    :param storage: storage resource
    :type storage: float
    :param delay: delay property of the Node
    :type delay: float
    :param bandwidth: bandwidth property of the Node
    :type bandwidth: float
    :return: None
    """
    super(NodeResource, self).__init__()
    # container: compute
    self.cpu = cpu
    self.mem = mem
    # container
    self.storage = storage
    self.delay = delay
    self.bandwidth = bandwidth

  def persist (self):
    res = OrderedDict()
    if self.cpu is not None:
      res["cpu"] = self.cpu
    if self.mem is not None:
      res["mem"] = self.mem
    if self.storage is not None:
      res["storage"] = self.storage
    if self.delay is not None:
      res["delay"] = self.delay
    if self.bandwidth is not None:
      res["bandwidth"] = self.bandwidth
    return res

  def load (self, data, *args, **kwargs):
    self.cpu = data.get('cpu')
    self.mem = data.get('mem')
    self.storage = data.get('storage')
    self.delay = data.get('delay')
    self.bandwidth = data.get('bandwidth')
    return self

  def __getitem__ (self, item):
    if hasattr(self, item):
      return getattr(self, item)
    else:
      raise KeyError(
        "%s object has no key: %s" % (self.__class__.__name__, item))

  def __setitem__ (self, key, value):
    if hasattr(self, key):
      return setattr(self, key, value)
    else:
      raise KeyError(
        "%s object has no key: %s" % (self.__class__.__name__, key))

  def __repr__ (self):
    return "Resources of %s:\ncpu: %s\nmem: %s\nstorage: %s\nbandwidth: " \
           "%s\ndelay: %s" % (
             self.__class__.__name__, self.cpu, self.mem, self.storage,
             self.bandwidth, self.delay)

  def __str__ (self):
    return "cpu: %s mem: %s storage: %s bandwidth: %s delay: %s" % (
      self.cpu, self.mem, self.storage, self.bandwidth, self.delay)


class Flowrule(Element):
  """
  Class for storing a flowrule.
  """

  def __init__ (self, id=None, match="", action="", bandwidth=None):
    """
    Init.

    :param match: matching rule
    :type match: str
    :param action: forwarding action
    :type action: str
    :return: None
    """
    super(Flowrule, self).__init__(id=id, type="FLOWRULE")
    self.match = match  # mandatory
    self.action = action  # mandatory
    self.bandwidth = bandwidth

  def persist (self):
    flowrule = super(Flowrule, self).persist()
    if self.match:
      flowrule['match'] = self.match
    flowrule['action'] = self.action
    if self.bandwidth:
      flowrule['bandwidth'] = self.bandwidth
    return flowrule

  def load (self, data, *args, **kwargs):
    super(Flowrule, self).load(data=data)
    self.match = data.get('match', "")
    self.action = data.get('action', "")
    self.bandwidth = data.get('bandwidth')
    return self

  def __repr__ (self):
    return "Flowrule object:\nmatch: %s \naction: %s \nbandwidth: %s" % (
      self.match, self.action, self.bandwidth)

  def __str__ (self):
    return "%s(match: %s, action: %s, bw: %s)" % (
      self.__class__.__name__, self.match, self.action, self.bandwidth)


class Port(Element):
  """
  Class for storing a port of an NF.
  """
  # Port type
  TYPE = "PORT"

  def __init__ (self, node, properties=None, id=None):
    """
    Init.

    :param node: container node
    :type node: :any:`Node`
    :param id: optional id
    :type id: str or int
    :param properties: supported properties of the port
    :type properties: str or iterable(str)
    :return: None
    """
    super(Port, self).__init__(id=id, type=self.TYPE)
    if not isinstance(node, Node):
      raise RuntimeError("Port's container node must be derived from Node!")
    # weakref to avoid circular reference
    # weakref causes some really annoying issue --> changed to normal ref
    # self.__node = weakref.ref(node)
    self.__node = node
    # Set properties list according to given param type
    if isinstance(properties, (str, unicode)):
      self.properties = [str(properties), ]
    elif isinstance(properties, Iterable):
      self.properties = [p for p in properties]
    elif properties is None:
      self.properties = []
    else:
      raise RuntimeError(
        "Port's properties attribute must be iterable or a string!")

  @property
  def node (self):
    # return self.__node()
    return self.__node

  @node.deleter
  def node (self):
    del self.__node

  def add_property (self, property, value=None):
    """
    Add a property or list of properties to the port.
    If value is not None, then property is used as a key.

    :param property: property
    :type property: str or list or tuple
    :param value: optional property value
    :type value: str
    :return: the Port object to allow function chaining
    :rtype: :any:`Port`
    """
    if isinstance(property, str):
      if value is not None:
        # wouldn't it be better to store properties as key-value pairs?
        property = property + ':' + value
      self.properties.append(property)
    elif isinstance(property, Iterable):
      self.properties.extend(property)
    return self

  def del_property (self, property=None):
    """
    Remove the property from the Port. If no property is given remove all the
    properties from the Port.

    :param property: property
    :type property: str
    :return: None
    """
    if property is None:
      self.properties[:] = []
    else:
      self.properties.remove(property)

  def get_property (self, property):
    """
    Return the value of property

    :param property: property
    :type property: str
    :return: the value of the property
    :rtype: str
    """
    for prop in self.properties:
      if prop.startswith(property + ":"):
        return prop.split(":", 1)[1]

  def persist (self):
    port = super(Port, self).persist()
    property = [property for property in self.properties]
    if property:
      port["property"] = property
    return port

  def load (self, data, *args, **kwargs):
    super(Port, self).load(data=data)
    for property in data.get('property', ()):
      self.properties.append(property)

  def __repr__ (self):
    return "%s(node: %s, id: %s)" % (
      self.__class__.__name__, self.node.id, self.id)


class InfraPort(Port):
  """
  Class for storing a port of Infra Node and handles flowrules.
  """

  def __init__ (self, node, properties=None, id=None):
    """
    Init.

    :param node: container node
    :type node: :any:`Node`
    :param id: optional id
    :type id: str or int
    :param properties: supported properties of the port
    :type properties: str or iterable(str)
    :return: None
    """
    super(InfraPort, self).__init__(node=node, id=id, properties=properties)
    self.flowrules = []

  def add_flowrule (self, match, action, bandwidth=None, id=None):
    """
    Add a flowrule with the given params to the port of an Infrastructure Node.

    :param match: matching rule
    :type match: str
    :param action: forwarding action
    :type action: str
    :param bandwidth: bandwidth value
    :type bandwidth: int
    :param id: specific id of the flowrule
    :type id: str or int
    :return: newly created and stored flowrule
    :rtype: :any:`Flowrule`
    """
    flowrule = Flowrule(id=id, match=match, action=action, bandwidth=bandwidth)
    self.flowrules.append(flowrule)
    return flowrule

  def del_flowrule (self, id=None, match=None, action=None):
    """
    Remove the flowrule with the given id or all flowrules which match the given
    action/match parameters.

    :param id: flowrule id
    :type id: int or str
    :param match: matching rule
    :type match: str
    :param action: forwarding action
    :type action: str
    :return: the actual FlowRule is found and removed or not
    :rtype: bool
    """
    if id is not None:
      for f in self.flowrules:
        if f.id == id:
          self.flowrules.remove(f)
          return True
    else:
      deletable = []
      ret = False
      for f in self.flowrules:
        if f.match == match or f.action == action:
          deletable.append(f)
      for f in deletable:
        self.flowrules.remove(f)
        ret = True
      return ret

  def persist (self):
    port = super(InfraPort, self).persist()
    flowrules = [f.persist() for f in self.flowrules]
    if flowrules:
      port["flowrules"] = flowrules
    return port

  def load (self, data, *args, **kwargs):
    super(InfraPort, self).load(data=data)
    for flowrule in data('flowrules', ()):
      self.add_flowrule(match=flowrule.get('match'),
                        action=flowrule.get('action'))


################################################################################
# ------------------------ NF / SAP / INFRASTRUCTURE NODES -------------------
################################################################################

class NodeNF(Node):
  """
  Network Function (NF) nodes in the graph.
  """

  def __init__ (self, id=None, name=None, func_type=None, dep_type=None,
                res=None):
    """
    Init.

    :param func_type: functional type (default: "None")
    :type func_type: str
    :param dep_type: deployment type (default: "None")
    :type dep_type: str
    :param res: optional NF resources
    :type res: :any:`NodeResource`
    :return: None
    """
    super(NodeNF, self).__init__(id=id, type=Node.NF, name=name)
    self.functional_type = func_type  # mandatory
    # container: specification
    self.deployment_type = dep_type
    self.resources = res if res is not None else NodeResource()
    # container

  def persist (self):
    node = super(NodeNF, self).persist()
    if self.functional_type is not None:
      node["functional_type"] = self.functional_type
    specification = OrderedDict()
    if self.deployment_type is not None:
      specification["deployment_type"] = self.deployment_type
    res = self.resources.persist()
    if res:
      specification["resources"] = res
    if specification:
      node["specification"] = specification
    return node

  def load (self, data, *args, **kwargs):
    super(NodeNF, self).load(data=data)
    self.functional_type = data.get('functional_type')
    if 'specification' in data:
      self.deployment_type = data['specification'].get('deployment_type')
      if 'resources' in data['specification']:
        self.resources.load(data['specification']['resources'])
    return self

  def __str__ (self):
    return "%s(id:%s, type:%s)" % (
      self.__class__.__name__, self.id, self.functional_type)


class NodeSAP(Node):
  """
  Class for SAP nodes in the NF-FG.
  """

  def __init__ (self, id=None, name=None, domain=None):
    super(NodeSAP, self).__init__(id=id, type=Node.SAP, name=name)
    # Signals if the SAP is an inter-domain SAP
    self.domain = domain

  def __str__ (self):
    return "SAP(id: %s, name: %s)" % (self.id, self.name)

  def __repr__ (self):
    return super(NodeSAP, self).__repr__()

  def persist (self):
    sap = super(NodeSAP, self).persist()
    if self.domain is not None:
      sap['domain'] = self.domain
    return sap

  def load (self, data, *args, **kwargs):
    super(NodeSAP, self).load(data=data)
    self.domain = data.get('domain')
    return self


class NodeInfra(Node):
  """
  Class for infrastructure nodes in the NF-FG.
  """
  # Defined Infra types
  TYPE_BISBIS = "BiSBiS"
  TYPE_EE = "EE"  # default Execution Environment with NETCONF
  TYPE_STATIC_EE = "STATIC"  # Static EE probably will never use
  TYPE_SDN_SWITCH = "SDN-SWITCH"  # Common OVS switch - can't run NF
  # Defined domain type
  DEFAULT_DOMAIN = "VIRTUAL"

  def __init__ (self, id=None, name=None, domain=None, infra_type=None,
                supported=None, res=None):
    """
    Init.

    :param domain: domain of the Infrastructure Node
    :type domain: str
    :param infra_type: type of the Infrastructure Node
    :type infra_type: int or str
    :param supported: list of supported functional types
    :type supported: list
    :param res: optional Infra resources
    :type res: :any:`NodeResource`
    :return: None
    """
    super(NodeInfra, self).__init__(id=id, type=Node.INFRA, name=name)
    self.domain = domain if domain is not None else self.DEFAULT_DOMAIN
    self.infra_type = infra_type if infra_type is not None else \
      self.TYPE_BISBIS
    # Set supported types according to given param type
    if isinstance(supported, (str, unicode)):
      self.supported = [str(supported), ]
    elif isinstance(supported, Iterable):
      self.supported = [sup for sup in supported]
    elif supported is None:
      self.supported = []
      # Set resource container
    self.resources = res if res is not None else NodeResource()

  def add_port (self, id=None, properties=None):
    """
    Add a port with the given params to the Infrastructure Node.

    :param id: optional id
    :type id: str or int
    :param properties: supported properties of the port (one or more as list)
    :type properties: str or iterable(str)
    :return: newly created and stored Port object
    :rtype: :any:`Port`
    """
    port = InfraPort(self, properties=properties, id=id)
    self.ports.append(port)
    return port

  def add_supported_type (self, functional_type):
    """
    Add a supported functional type or list of types to the Infrastructure Node.

    :param functional_type: the functional type
    :type functional_type: str or list or tuple
    :return: the Node object to allow function chaining
    :rtype: :any:`NodeInfra`
    """
    if isinstance(functional_type, str):
      self.supported.append(functional_type)
    elif isinstance(functional_type, Iterable):
      self.supported.extend(functional_type)
    else:
      raise RuntimeError("Not supported parameter type!")
    return self

  def del_supported_type (self, functional_type=None):
    """
    Remove the given functional type from the Infrastructure Node. If no type
    is given then all supported type will be removed.

    :param functional_type: the functional type
    :type functional_type: str
    :return: None
    """
    if functional_type is None:
      self.supported[:] = []
    else:
      self.supported.remove(functional_type)

  def persist (self):
    node = super(NodeInfra, self).persist()
    if self.domain is not None:
      node["domain"] = self.domain
    node["type"] = self.infra_type
    supported = [sup for sup in self.supported]
    if supported:
      node['supported'] = supported
    res = self.resources.persist()
    if res:
      node["resources"] = res
    return node

  def load (self, data, *args, **kwargs):
    self.id = data['id']
    self.operation = data.get("operation")  # optional
    self.name = data.get('name')  # optional
    for port in data.get('ports', ()):
      infra_port = self.add_port(id=port['id'], properties=port.get('property'))
      for flowrule in port.get('flowrules', ()):
        infra_port.flowrules.append(Flowrule.parse(flowrule))
    self.domain = data.get('domain', self.DEFAULT_DOMAIN)  # optional
    self.infra_type = data['type']
    if 'supported' in data:
      self.supported = data['supported']
    if 'resources' in data:
      self.resources.load(data['resources'])
    return self

  def __str__ (self):
    return "Infra(id: %s, name: %s, type: %s)" % (
      self.id, self.name, self.infra_type)

  def __repr__ (self):
    return super(NodeInfra, self).__repr__()


################################################################################
# ---------- SG REQUIREMENTS / SG NEXT_HOPS / INFRASTRUCTURE LINKS -----------
################################################################################


class EdgeLink(Link):
  """
  Class for static and dynamic links in the NF-FG.

  Represent a static or dynamic link.
  """

  def __init__ (self, src=None, dst=None, type=None, id=None, backward=False,
                delay=None, bandwidth=None):
    """
    Init.

    :param src: source port
    :type src: :any:`Port`
    :param dst: destination port
    :type dst: :any:`Port`
    :param type: type of the link (default: Link.STATIC)
    :type type: str
    :param id: optional link id
    :type id: str or int
    :param backward: the link is a backward link compared to an another Link
    :type backward: bool
    :param delay: delay resource
    :type delay: float
    :param bandwidth: bandwidth resource
    :type bandwidth: float
    :return: None
    """
    type = type if type is not None else Link.STATIC
    super(EdgeLink, self).__init__(src=src, dst=dst, type=type, id=id)
    # Signal if the link is a backward link compared to an another existing
    # Link with the same src and dst Node
    self.backward = backward  # always False by default
    self.delay = delay  # optional
    self.bandwidth = bandwidth  # optional

  def persist (self):
    link = super(EdgeLink, self).persist()
    if self.delay is not None:
      link["delay"] = self.delay
    if self.bandwidth is not None:
      link["bandwidth"] = self.bandwidth
    if self.backward:
      link["backward"] = self.backward
    return link

  def load (self, data, container=None, *args, **kwargs):
    if container is None:
      raise RuntimeError(
        "Container reference is not given for edge endpoint lookup!")
    for link in container.edge_links:
      if link.id == data['id']:
        raise RuntimeError("ID conflict during EdgeLink loading: %s" % link.id)
    super(EdgeLink, self).load(data=data, container=container)
    self.delay = data.get('delay')
    self.bandwidth = data.get('bandwidth')
    self.backward = data.get('backward', False)
    return self

  def __str__ (self):
    return "Link(id: %s, src: %s[%s], dst: %s[%s], type: %s, delay:%s, " \
           "bandwidth: %s)" % (
             self.id, self.src.node.id, self.src.id, self.dst.node.id,
             self.dst.id, self.type, self.delay, self.bandwidth)

  def __repr__ (self):
    return "<|ID: %s, Type: %s, Back: %s, src: %s[%s], dst: %s[%s] --> %s|>" % (
      self.id, self.type, self.backward, self.src.node.id, self.src.id,
      self.dst.node.id, self.dst.id, super(Element, self).__repr__())


class EdgeSGLink(Link):
  """
  Class for links of SG.

  Represent an edge between SG elements.
  """

  def __init__ (self, src=None, dst=None, id=None, flowclass=None):
    """
    Init.

    :param src: source port
    :type src: :any:`Port`
    :param dst: destination port
    :type dst: :any:`Port`
    :param id: optional id
    :type id: str or int
    :param flowclass: flowclass of SG next hop link a.k.a a match
    :type flowclass: str
    :return: None
    """
    super(EdgeSGLink, self).__init__(src=src, dst=dst, type=Link.SG, id=id)
    self.flowclass = flowclass  # flowrule without action

  def persist (self):
    link = super(EdgeSGLink, self).persist()
    if self.flowclass is not None:
      link["flowclass"] = self.flowclass
    return link

  def load (self, data, container=None, *args, **kwargs):
    if container is None:
      raise RuntimeError(
        "Container reference is not given for edge endpoint lookup!")
    for link in container.edge_sg_nexthops:
      if link.id == data['id']:
        raise RuntimeError(
          "ID conflict during EdgeSGLink loading: %s" % link.id)
    super(EdgeSGLink, self).load(data=data, container=container)
    self.flowclass = data.get('flowclass')
    return self


class EdgeReq(Link):
  """
  Class for constraint of networking parameters between SG elements.

  Class for requirements between arbitrary NF modes.
  """

  def __init__ (self, src=None, dst=None, id=None, delay=None, bandwidth=None,
                sg_path=None):
    """
    Init.

    :param src: source port
    :type src: :any:`Port`
    :param dst: destination port
    :type dst: :any:`Port`
    :param id: optional id
    :type id: str or int
    :param delay: delay resource
    :type delay: float
    :param bandwidth: bandwidth resource
    :type bandwidth: float
    :param sg_path: list of ids of sg_links represents end-to-end requirement
    :type sg_path: list ot tuple
    :return: None
    """
    super(EdgeReq, self).__init__(src=src, dst=dst, type=Link.REQUIREMENT,
                                  id=id)
    self.delay = delay  # optional
    self.bandwidth = bandwidth  # optional
    # Set sg_path types according to given param type
    if isinstance(sg_path, (str, unicode)):
      self.sg_path = [str(sg_path), ]
    elif isinstance(sg_path, Iterable):
      self.sg_path = [p for p in sg_path]
    elif sg_path is None:
      self.sg_path = []

  def persist (self):
    link = super(EdgeReq, self).persist()
    if self.delay is not None:
      link["delay"] = self.delay
    if self.bandwidth is not None:
      link["bandwidth"] = self.bandwidth
    sg_path = self.sg_path[:]
    if sg_path:
      link['sg_path'] = sg_path
    return link

  def load (self, data, container=None, *args, **kwargs):
    if container is None:
      raise RuntimeError(
        "Container reference is not given for edge endpoint lookup!")
    for link in container.edge_reqs:
      if link.id == data['id']:
        raise RuntimeError("ID conflict during EdgeReq loading: %s" % link.id)
    super(EdgeReq, self).load(data=data, container=container)
    self.delay = data.get('delay')
    self.bandwidth = data.get('bandwidth')
    if 'sg_path' in data:
      self.sg_path = data['sg_path']
    return self


################################################################################
# --------========== MAIN CONTAINER STARTS HERE =========-------------
################################################################################

class NFFGModel(Element):
  """
  Wrapper class for a single NF-FG.

  Network Function Forwarding Graph (NF-FG) data model.
  """
  # Default version
  VERSION = "1.0"
  # Namespace
  NAMESPACE = "http://csikor.tmit.bme.hu/netconf/unify/nffg"
  # prefix
  PREFIX = "nffg"
  # Organization
  ORGANIZATION = "BME-TMIT"
  # Description
  DESCRIPTION = "Network Function Forwarding Graph (NF-FG) data model"
  # Container type
  TYPE = "NFFG"

  def __init__ (self, id=None, name=None, version=None):
    """
    Init

    :param id: optional NF-FG identifier (generated by default)
    :type id: str or int
    :param name: optional NF-FG name
    :type name: str
    :param version: optional version (default: 1.0)
    :type version: str
    :return: None
    """
    super(NFFGModel, self).__init__(id=id, type=self.TYPE)
    self.name = name
    self.version = version if version is not None else self.VERSION
    self.node_nfs = []
    self.node_saps = []
    self.node_infras = []
    self.edge_links = []
    self.edge_sg_nexthops = []
    self.edge_reqs = []

  @property
  def nodes (self):
    """
    Return all the node in the Container as a list.

    :return: nodes
    :rtype: list
    """
    # shallow copy
    nodes = self.node_nfs[:]
    nodes.extend(self.node_saps)
    nodes.extend(self.node_infras)
    return nodes

  @property
  def edges (self):
    """
    Return all the edges in the Container as a list.

    :return: edges
    :rtype: list
    """
    # shallow copy
    edges = self.edge_links[:]
    edges.extend(self.edge_reqs)
    edges.extend(self.edge_sg_nexthops)
    return edges

  def get_port (self, node_id, port_id):
    """
    Return the Port reference according to the given Node and Port ids.

    :param node_id: node id
    :type node_id: str
    :param port_id: port id
    :type port_id: str
    :return: port object
    :rtype: :any:`Port`
    """
    for node in self.nodes:
      if node.id == node_id:
        for port in node.ports:
          if port.id == port_id:
            return port
    return None

  def add_nf (self, **kwargs):
    """
    Create and store a NF Node with the given parameters.

    :return: the created NF
    :rtype: :any:`NodeNF`
    """
    nf = NodeNF(**kwargs)
    for node in self.node_nfs:
      if node.id == nf.id:
        raise RuntimeError(
          "NodeNF with id: %s already exist in the container!" % node.id)
    self.node_nfs.append(nf)
    return nf

  def del_nf (self, id):
    """
    Remove the NF Node with the given id.

    :param id: NF id
    :param id: str
    :return: the actual Node is found and removed or not
    :rtype: bool
    """
    for node in self.node_nfs:
      if node.id == id:
        self.node_nfs.remove(node)
        return True

  def add_sap (self, **kwargs):
    """
    Create and store a SAP Node with the given parameters.

    :return: the created SAP
    :rtype: :any:`NodeSAP`
    """
    sap = NodeSAP(**kwargs)
    for node in self.node_saps:
      if node.id == sap.id:
        raise RuntimeError(
          "NodeNF with id: %s already exist in the container!" % node.id)
    self.node_saps.append(sap)
    return sap

  def del_sap (self, id):
    """
    Remove the SAP Node with the given id.

    :param id: SAP id
    :param id: str
    :return: the actual Node is found and removed or not
    :rtype: bool
    """
    for node in self.node_saps:
      if node.id == id:
        self.node_saps.remove(node)
        return True

  def add_infra (self, **kwargs):
    """
    Create and store an Infrastructure Node with the given parameters.

    :return: the created Infra
    :rtype: :any:`NodeInfra`
    """
    infra = NodeInfra(**kwargs)
    for node in self.node_infras:
      if node.id == infra.id:
        raise RuntimeError(
          "NodeNF with id: %s already exist in the container!" % node.id)
    self.node_infras.append(infra)
    return infra

  def del_infra (self, id):
    """
    Remove Infrastructure Node with the given id.

    :param id: Infra id
    :param id: str
    :return: the actual Node is found and removed or not
    :rtype: bool
    """
    for node in self.node_infras:
      if node.id == id:
        self.node_infras.remove(node)
        return True

  def add_link (self, src, dst, **kwargs):
    """
    Create and store a Link Edge with the given src and dst nodes.

    :param src: source node
    :type src: :any:`Node`
    :param dst:  destination node
    :type dst: :any:`Node`
    :return: the created edge
    :rtype: :any:`EdgeLink`
    """
    link = EdgeLink(src=src, dst=dst, **kwargs)
    for edge in self.edge_links:
      if edge.src.id == src.id and edge.dst.id == dst.id:
        raise RuntimeError(
          "EdgeLink with src(%s) and dst(%s) endpoints already exist in the "
          "container!" % (src.id, dst.id))
    self.edge_links.append(link)
    return link

  def del_link (self, src, dst):
    """
    Remove Link Edge with given src and dst nodes.

    :param src: source node
    :type src: :any:`Node`
    :param dst:  destination node
    :type dst: :any:`Node`
    :return: the actual Edge is found and removed or not
    :rtype: bool
    """
    for edge in self.edge_links:
      if edge.src.id == src.id and edge.dst.id == dst.id:
        self.edge_links.remove(edge)
        return True

  def add_sg_hop (self, src, dst, **kwargs):
    """
    Create and store an SG next hop Edge with the given src and dst nodes.

    :param src: source node
    :type src: :any:`Node`
    :param dst:  destination node
    :type dst: :any:`Node`
    :return: the created edge
    :rtype: :any:`EdgeSGLink`
    """
    hop = EdgeSGLink(src=src, dst=dst, **kwargs)
    for edge in self.edge_sg_nexthops:
      if edge.src.id == src.id and edge.dst.id == dst.id:
        raise RuntimeError(
          "EdgeSGLink with src(%s) and dst(%s) endpoints already exist in the "
          "container!" % (src.id, dst.id))
    self.edge_sg_nexthops.append(hop)
    return hop

  def del_sg_hop (self, src, dst):
    """
    Remove SG next hop Edge with given src and dst nodes.

    :param src: source node
    :type src: :any:`Node`
    :param dst:  destination node
    :type dst: :any:`Node`
    :return: the actual Edge is found and removed or not
    :rtype: bool
    """
    for edge in self.edge_sg_nexthops:
      if edge.src.id == src.id and edge.dst.id == dst.id:
        self.edge_sg_nexthops.remove(edge)
        return True

  def add_req (self, src, dst, **kwargs):
    """
    Create and store a Requirement Edge with the given src and dst nodes.

    :param src: source node
    :type src: :any:`Node`
    :param dst:  destination node
    :type dst: :any:`Node`
    :return: the created edge
    :rtype: :any:`EdgeReq`
    """
    req = EdgeReq(src=src, dst=dst, **kwargs)
    for edge in self.edge_reqs:
      if edge.src.id == src.id and edge.dst.id == dst.id:
        raise RuntimeError(
          "EdgeReq with src(%s) and dst(%s) endpoints already exist in the "
          "container!" % (src.id, dst.id))
    self.edge_sg_nexthops.append(req)
    return req

  def del_req (self, src, dst):
    """
    Remove Requirement Edge with given src and dst nodes.

    :param src: source node
    :type src: :any:`Node`
    :param dst:  destination node
    :type dst: :any:`Node`
    :return: the actual Edge is found and removed or not
    :rtype: bool
    """
    for edge in self.edge_reqs:
      if edge.src.id == src.id and edge.dst.id == dst.id:
        self.edge_sg_nexthops.remove(edge)
        return True

  def persist (self):
    nffg = OrderedDict(parameters=OrderedDict(id=self.id))
    if self.name is not None:
      nffg["parameters"]["name"] = self.name
    nffg["parameters"]["version"] = self.version
    if self.node_nfs:
      nffg["node_nfs"] = [nf.persist() for nf in self.node_nfs]
    if self.node_saps:
      nffg["node_saps"] = [sap.persist() for sap in self.node_saps]
    if self.node_infras:
      nffg["node_infras"] = [infra.persist() for infra in self.node_infras]
    if self.edge_links:
      nffg["edge_links"] = [link.persist() for link in self.edge_links]
    if self.edge_sg_nexthops:
      nffg["edge_sg_nexthops"] = [sg.persist() for sg in self.edge_sg_nexthops]
    if self.edge_reqs:
      nffg["edge_reqs"] = [req.persist() for req in self.edge_reqs]
    return nffg

  def load (self, raw_data, *args, **kwargs):
    """
    Read the given JSON object structure and try to convert to an NF-FG
    representation as an :any:`NFFGModel`.

    :param raw_data: raw date in JSON
    :type raw_data: str
    :return: the constructed NF-FG representation
    :rtype: :any:`NFFGModel`
    """

    # Converter function to avoid unicode
    def unicode_to_str (input):
      if isinstance(input, dict):
        return OrderedDict(
          [(unicode_to_str(key), unicode_to_str(value)) for key, value in
           input.iteritems()])
      elif isinstance(input, list):
        return [unicode_to_str(element) for element in input]
      elif isinstance(input, unicode):
        return input.encode('utf-8')
      else:
        return input

    try:
      # Load from plain text
      data = json.loads(raw_data, object_hook=unicode_to_str)
      # Create container
      container = NFFGModel()
      # Fill container fields
      container.id = data['parameters']['id']  # mandatory
      container.name = data['parameters'].get('name')  # can be None
      container.version = data['parameters']['version']  # mandatory
      # Fill Container lists
      for n in data.get('node_nfs', ()):
        container.node_nfs.append(NodeNF.parse(data=n))
      for n in data.get('node_saps', ()):
        container.node_saps.append(NodeSAP.parse(data=n))
      for n in data.get('node_infras', ()):
        container.node_infras.append(NodeInfra.parse(data=n))
      for e in data.get('edge_links', ()):
        container.edge_links.append(EdgeLink.parse(data=e, container=container))
      for e in data.get('edge_sg_nexthops', ()):
        container.edge_sg_nexthops.append(
          EdgeSGLink().parse(data=e, container=container))
      for e in data.get('edge_reqs', ()):
        container.edge_reqs.append(EdgeReq.parse(data=e, container=container))
    except KeyError as e:
      raise RuntimeError("Not a valid NFFGModel format!", e)
    return container

  def dump (self):
    """
    Dump the container in plain text based on JSON structure.

    :return: NF-FG representation as plain text
    :rtype: str
    """
    return json.dumps(self.persist(), indent=2, sort_keys=False)


def test_parse_load ():
  # NF
  nf = NodeNF()
  nf.id = "nf1"
  nf.name = "NetworkFunction1"
  nf.functional_type = "functype1"
  nf.deployment_type = "virtual"
  nf.resources.cpu = "10"
  nf.resources.mem = "1"
  nf.resources.storage = "10"
  nf.resources.bandwidth = "2"
  nf.resources.delay = "2"
  # nf.add_port("port_nf1", "port1", "virtual", "vlan:1025")
  p1 = nf.add_port(id="port_nf1", properties=("port1", "virtual", "vlan:1025"))
  # SAP
  sap = NodeSAP()
  sap.id = "sap1"
  sap.name = "sap1"
  p2 = sap.add_port(id="port_sap")
  # Infra
  infra = NodeInfra()
  infra.id = "infra1"
  infra.operation = Element.ADD
  infra.name = "BisBis1"
  infra.domain = "virtual"
  infra.resources.cpu = "20"
  infra.resources.mem = "2"
  infra.resources.storage = "20"
  infra.resources.bandwidth = "4"
  # infra.add_supported_type("functype1")
  infra.add_supported_type(("functype1", "functype2", "functype3"))
  # infra.resources.delay = "4"
  p3 = port_infra = infra.add_port(id="port_infra")
  port_infra.add_flowrule("match123", "action456")
  # Edge link
  edge_link = EdgeLink(p2, p3, id="link3")
  edge_link.bandwidth = "100"
  edge_link.delay = "5"
  edge_link.backward = True
  edge_link.operation = Element.DEL
  # Edge SG next hop
  edge_sg = EdgeSGLink(p1, p2, id="link1")
  edge_sg.flowclass = "flowclass1"
  # Edge requirement
  edge_req = EdgeReq(p2, p3)
  edge_req.id = "link2"
  edge_req.bandwidth = "100"
  edge_req.delay = "5"
  edge_req.sg_path.append(edge_sg.id)
  edge_req.sg_path.append(edge_link.id)
  # Generate
  nffg = NFFGModel()
  nffg.name = "NFFG1"
  nffg.node_infras.append(infra)
  nffg.node_nfs.append(nf)
  nffg.node_saps.append(sap)
  nffg.edge_links.append(edge_link)
  nffg.edge_sg_nexthops.append(edge_sg)
  nffg.edge_reqs.append(edge_req)
  data = nffg.dump()
  print "\nGenerated NF-FG:"
  print data
  nffg2 = NFFGModel.parse(data)
  print "\nParsed NF-FG:"
  print nffg2.dump()
  return nffg


def test_networkx_mod ():
  nf = NodeNF()
  print nf["id"]
  nf["id"] = "nf1"
  print nf["id"]
  print "get check"
  print "id: %s" % nf.get("id")
  print "lorem: %s" % nf.get("lorem", "ipsum")


if __name__ == "__main__":
  test_parse_load()
  # test_networkx_mod()
