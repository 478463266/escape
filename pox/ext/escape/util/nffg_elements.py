# Copyright 2015 Balazs Sonkoly, Janos Czentye
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Classes for handling the elements of the NF-FG data structure
"""


class Base(object):
  """
  Main base class for common functionality.
  """

  def __init__ (self, ID=None):
    """
    Init.

    :param ID: optional identification (generated by default)
    :type ID: str or int
    """
    super(Base, self).__init__()
    self.id = str(ID) if ID is not None else str(id(self))  # mandatory

  def persist (self):
    """
    Common function to persist the class structure into a plain text format.
    """
    raise NotImplementedError()


class Node(Base):
  """
  Base class for different types of nodes in the NF-FG.
  """

  def __init__ (self, ID=None, name=None):
    """
    Init.

    :param name: optional name
    :type name: str
    :return: None
    """
    super(Node, self).__init__(ID)
    self.name = name  # optional
    self.ports = []  # list

  def add_port (self, type=None, ID=None):
    """
    Add a port with the given params to the NF.
    """
    self.ports.append(Port(ID=ID, type=type))

  def del_port (self, id):
    """
    Remove the port with the given id from the NF.
    """
    for p in self.ports:
      if p.id == id:
        self.ports.remove(p)
        return

  def persist (self):
    """
    Common function to persist the class structure into a plain text format.
    """
    node = {"id": str(self.id),
            "ports": [port.persist() for port in self.ports]}
    if self.name is not None:
      node["name"] = str(self.name)
    return node


################################################################################
# ---------- NODE AND LINK RESOURCES -------------------
################################################################################

class NodeResource(Base):
  """
  Class for storing resource information for Nodes.

  YANG: grouping node_resource
  """

  def __init__ (self, cpu=None, mem=None, storage=None, networking=None):
    """
    Init.

    :param cpu: CPU resource
    :type cpu: str or int
    :param mem: memory resource
    :type mem: str or int
    :param storage: storage resource
    :type storage: str or int
    :param networking: networking resource
    :type networking: str or int
    :return: None
    """
    super(NodeResource, self).__init__()
    # container: compute
    self.cpu = cpu
    self.mem = mem
    # container
    self.storage = storage
    self.networking = networking

  def persist (self):
    res = {}
    compute = {}
    if self.cpu is not None:
      compute["cpu"] = str(self.cpu)
    if self.mem is not None:
      compute["mem"] = str(self.mem)
    if compute:
      res["compute"] = compute
    if self.storage is not None:
      res["storage"] = str(self.storage)
    if self.networking is not None:
      res["networking"] = str(self.networking)
    return res


class LinkResource(Base):
  """
  Class for storing resource information for edges.

  YANG: grouping link_resource
  """

  def __init__ (self, delay=None, bandwidth=None):
    """
    Init.

    :param delay: delay resource
    :type delay: str or int
    :param bandwidth: bandwidth resource
    :type bandwidth: str or int
    :return: None
    """
    super(LinkResource, self).__init__()
    self.delay = delay
    self.bandwidth = bandwidth

  def persist (self):
    # return {"delay": str(self.delay), "bandwidth": str(self.bandwidth)}
    res = {}
    if self.delay is not None:
      res["delay"] = str(self.delay)
    if self.bandwidth is not None:
      res["bandwidth"] = str(self.bandwidth)
    return res


class Port(Base):
  """
  Class for storing a port of an NF.
  """

  def __init__ (self, ID=None, type="port"):
    """
    Init.

    :param type: initial property of the port a.k.a type (default: "port")
    :type type: str
    :return: None
    """
    super(Port, self).__init__(ID)
    self.property = [str(type), ]  # leaf-list - formerly known as type

  def persist (self):
    return {"id": str(self.id),
            "property": [property for property in self.property]}


class Flowrule(Base):
  """
  Class for storing a flowrule.
  """

  def __init__ (self, match=None, action=None):
    """
    Init.

    :param match: matching rule
    :type match: str
    :param action: forwarding action
    :type action: str
    :return: None
    """
    super(Flowrule, self).__init__()
    self.match = match
    self.action = action

  def persist (self):
    return {"match": str(self.match), "action": str(self.action)}


class InfraPort(Port):
  """
  Class for storing a port of Infra Node and handles flowrules.
  """

  def __init__ (self, ID=None, type="port"):
    super(InfraPort, self).__init__(ID=ID, type=type)
    self.flowrules = []

  def add_flowrule (self, match=None, action=None):
    """
    Add a flowrule with the given params to the port of Infra Node..
    """
    self.flowrules.append(Flowrule(match=match, action=action))

  def del_flowrule (self, id):
    """
    Remove the flowrule with the given id from the Infra Node.
    """
    for f in self.flowrules:
      if f.id == id:
        self.flowrules.remove(f)
        return

  def persist (self):
    port = super(InfraPort, self).persist()
    port["flowrules"] = [f.persist() for f in self.flowrules]
    return port


################################################################################
# ------------------------ NF / SAP / INFRASTRUCTURE NODES -------------------
################################################################################

class NodeNF(Node):
  """
  Network Function (NF) nodes in the graph.
  """

  def __init__ (self, ID=None, name=None, func_type=None, dep_type=None,
       res=None):
    """
    Init.

    :param func_type: functional type (default: "None")
    :type func_type: str
    :param dep_type: deployment type (default: "None")
    :type dep_type: str
    :param res: NF resources
    :type res: NodeResource
    :return: None
    """
    super(NodeNF, self).__init__(ID=ID, name=name)
    self.functional_type = str(func_type)  # mandatory
    # container: specification
    self.deployment_type = str(dep_type)
    self.resources = res if res is not None else NodeResource()
    # container

  def persist (self):
    node = super(NodeNF, self).persist()
    if self.functional_type is not None:
      node["functional_type"] = str(self.functional_type)
    specification = {}
    if self.deployment_type is not None:
      specification["deployment_type"] = str(self.deployment_type)
    res = self.resources.persist()
    if res:
      specification["resources"] = res
    if specification:
      node["specification"] = specification
    return node


class NodeSAP(Node):
  """
  Class for SAP nodes in the NF-FG.
  """

  def __init__ (self, ID=None, name=None):
    super(NodeSAP, self).__init__(ID=ID, name=name)


class NodeInfra(Node):
  """
  Class for infrastructure nodes in the NF-FG.
  """
  # Default Infrastructure Node type
  DEFAULT_TYPE = 0
  # Default domain type
  DEFAULT_DOMAIN = "virtual"

  def __init__ (self, ID=None, name=None, res=None, domain=DEFAULT_DOMAIN,
       type=DEFAULT_TYPE):
    super(NodeInfra, self).__init__(ID=ID, name=name)
    self.domain = domain
    self.type = type  # mandatory
    self.resources = res if res is not None else NodeResource()

  def add_port (self, type=None, ID=None):
    """
    Add a port with the given params to the NF.
    """
    self.ports.append(InfraPort(ID=ID, type=type))

  def persist (self):
    node = super(NodeInfra, self).persist()
    if self.domain is not None:
      node["domain"] = str(self.domain)
    if self.type is not None:
      node["type"] = str(self.type)
    res = self.resources.persist()
    if res:
      node["resources"] = res
    return node


################################################################################
# ---------- SG REQUIREMENTS / SG NEXT_HOPS / INFRASTRUCTURE LINKS -----------
################################################################################

class Link(Base):
  """
  Base class for different types of edges in the NF-FG
  """

  def __init__ (self, src, dst):
    """
    Init.

    :param src: source port
    :type src: Port
    :param dst: destination port
    :type dst: Port
    :return: None
    """
    super(Link, self).__init__()
    self.id = id
    self.src = src  # mandatory
    self.dst = dst  # mandatory

  def persist (self):
    return {} # TODO


class EdgeLink(Link):
  """
  Class for static and dynamic links in the NF-FG
  """

  def __init__ (self, id, src, dst, resources):
    super(Link, self).__init__(id, src, dst)
    self.resources = resources  # ResOfEdge


class EdgeSGLink(Link):
  """
  Class for links of SG
  """

  def __init__ (self, id, src, dst, flowclass):
    super(Link, self).__init__(id, src, dst)
    self.flowclass = flowclass  # flowrule without action


class EdgeReq(Link):
  """
  Class for requirements between arbitrary NF modes
  """

  def __init__ (self, id, src, dst, reqs):
    super(Link, self).__init__(id, src, dst)
    self.reqs = reqs  # ResOfEdge


if __name__ == "__main__":
  nf = NodeNF("nf1", "NF_21", "compressor", "virtual")
  nf.resources.cpu = "10VCPU"
  nf.resources.mem = "100MB"
  nf.add_port("abstract")
  nf.add_port("virtual", "port11")
  import json

  print json.dumps(nf.persist(), indent=2)
